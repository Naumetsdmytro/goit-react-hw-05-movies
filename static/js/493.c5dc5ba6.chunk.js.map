{"version":3,"file":"static/js/493.c5dc5ba6.chunk.js","mappings":"kNAEaA,EAAW,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAChC,OACE,wBACGD,EAAME,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAChB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,iBAAYF,GAAMG,MAAO,CAAEC,KAAMN,GAAzC,UACE,uBAAIG,OAFCD,EAMZ,KAGN,EAEYK,EAAa,SAAC,GAAyB,IAAvBR,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAClC,OACE,wBACGD,EAAME,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAChB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMN,GAAlC,UACE,uBAAIG,OAFCD,EAMZ,KAGN,C,mEC/BD,EAAyB,uB,SCGZM,EAAS,WACpB,OACE,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,MAAM,OACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,eACVC,eAAe,OACfC,YAAa,EACbC,qBAAsB,KAI7B,C,6ICuBD,UApCa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEM3B,GAAW4B,EAAAA,EAAAA,MAqBjB,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,2FAClBL,GAAW,GADO,mBAGWM,EAAAA,EAAAA,MAHX,OAIY,KADtBC,EAHU,QAICC,QACfC,IAAAA,OAAAA,QACE,gDAGJX,EAAUS,GATM,gDAWhBL,EAAS,KAAMQ,SAXC,yBAahBV,GAAW,GAbK,4EAAH,qDAgBjBK,GACD,GAAE,KAED,6BACE,2CACCR,EAAOW,OAAS,IAAK,SAAC,IAAD,CAAUlC,MAAOuB,EAAQtB,SAAUA,IACxDwB,IAAW,SAAC,IAAD,IACXE,IAAS,wBAAKA,MAGpB,C,8LCvCDU,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHN,EAAiB,mCAAG,sGAGrBK,EAAAA,EAAAA,IAAA,sCAAyCC,IAHpB,uBAErBC,EAFqB,EAE7BC,KAAQD,QAFqB,kBAIxBA,GAJwB,2CAAH,qDAOjBE,EAAiB,mCAAG,WAAMtC,GAAN,yFACRkC,EAAAA,EAAAA,IAAA,iBAAoBlC,EAApB,oBAAkCmC,IAD1B,uBACvBE,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBE,EAAgB,mCAAG,WAAMC,GAAN,yFAGpBN,EAAAA,EAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDK,IAHhC,uBAEpBJ,EAFoB,EAE5BC,KAAQD,QAFoB,kBAIvBA,GAJuB,2CAAH,sDAOhBK,EAAS,mCAAG,WAAMzC,GAAN,yFAGbkC,EAAAA,EAAAA,IAAA,iBAAoBlC,EAApB,4BAA0CmC,IAH7B,uBAEbO,EAFa,EAErBL,KAAQK,KAFa,kBAIhBA,GAJgB,2CAAH,sDAOTC,EAAY,mCAAG,WAAM3C,GAAN,yFAGhBkC,EAAAA,EAAAA,IAAA,iBAAoBlC,EAApB,4BAA0CmC,IAH1B,uBAEhBC,EAFgB,EAExBC,KAAQD,QAFgB,kBAInBA,GAJmB,2CAAH,qD","sources":["components/List/List.jsx","webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/pages/Home.jsx","components/services/API.js"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nexport const HomeList = ({ films, location }) => {\n  return (\n    <ul>\n      {films.map(({ id, title }) => {\n        return (\n          <li key={id}>\n            <Link to={`movies/${id}`} state={{ from: location }}>\n              <p>{title}</p>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport const MoviesList = ({ films, location }) => {\n  return (\n    <ul>\n      {films.map(({ id, title }) => {\n        return (\n          <li key={id}>\n            <Link to={`${id}`} state={{ from: location }}>\n              <p>{title}</p>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","import { Oval } from 'react-loader-spinner';\n\nimport styles from './Loader.module.css';\n\nexport const Loader = () => {\n  return (\n    <div className={styles.loader}>\n      <Oval\n        height={100}\n        width={100}\n        color=\"#000\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"oval-loading\"\n        secondaryColor=\"#000\"\n        strokeWidth={2}\n        strokeWidthSecondary={2}\n      />\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Notiflix from 'notiflix';\n\nimport { HomeList } from 'components/List';\nimport { Loader } from 'components/Loader';\nimport { fetchPopularFilms } from '../services/API';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setLoading(true);\n      try {\n        const popularFilms = await fetchPopularFilms();\n        if (popularFilms.length === 0) {\n          Notiflix.Notify.failure(\n            'Sorry something went wrong, try again later!'\n          );\n        }\n        setMovies(popularFilms);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, []);\n  return (\n    <main>\n      <h2>Trending today</h2>\n      {movies.length > 0 && <HomeList films={movies} location={location} />}\n      {loading && <Loader />}\n      {error && <h3>{error}</h3>}\n    </main>\n  );\n};\n\nexport default Home;\n","//1d32ff7478bc0343f9347491f3fce9be (key)\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1d32ff7478bc0343f9347491f3fce9be';\n\nexport const fetchPopularFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return results;\n};\n\nexport const fetchMoviedetails = async id => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieByName = async query => {\n  const {\n    data: { results },\n  } = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}`);\n  return results;\n};\n\nexport const fetchCast = async id => {\n  const {\n    data: { cast },\n  } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return cast;\n};\n\nexport const fetchReviews = async id => {\n  const {\n    data: { results },\n  } = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return results;\n};\n"],"names":["HomeList","films","location","map","id","title","to","state","from","MoviesList","Loader","className","styles","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","useState","movies","setMovies","loading","setLoading","error","setError","useLocation","useEffect","fetchMovies","fetchPopularFilms","popularFilms","length","Notiflix","message","axios","API_KEY","results","data","fetchMoviedetails","fetchMovieByName","query","fetchCast","cast","fetchReviews"],"sourceRoot":""}